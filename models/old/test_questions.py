
from data.law_data import mysql_request, Reader
from data.parser import JurisFrData
from itertools import imap
from gensim.utils import simple_preprocess
from gensim.models.word2vec import Word2Vec
from gensim.models.doc2vec import Doc2Vec, TaggedDocument
import json
import numpy as np
import matplotlib.pyplot as plt
from models.nlp_keywords import Vocabulary, Keywords
from nltk.stem.snowball import FrenchStemmer
from nltk.stem import SnowballStemmer


### First question

q1 = u'Le juge administratif peut-il moduler les pénalités de retard appliquées par la personne publique ? Dans quelles conditions ?'

# PK_ID of the answers
a1 = ['CETATEXT000035245504', 'CETATEXT000033965447', 'CETATEXT000034797144', 'CETATEXT000032553259']
ids1 = [42, 33326, 27636, 65501]

### Second question

q2 = u'Comment le juge contrôle la régularité de la méthode de notation des offres?'

# PK_ID of the answers
a2 = ['CETATEXT000029691320', 'CETATEXT000027333043', 'CETATEXT000034808264', 'CETATEXT000033404365', 'CETATEXT000030853964']
ids2 = [115157, 142595, 27112, 56122, 100945]


### Build dump
req = """SELECT PK_ID, URL, JURIDICTION, HTML, EXT_ID FROM _JURISPRUDENCE_FR WHERE PK_ID IN ({0})""".format(','.join(map(str,ids1+ids2)))
data = mysql_request(req)
data = sorted(data, key=lambda x:1 if x[0] in ids2 else 0)
with open('test_questions_dump', 'w') as f:
    for d in data:
        f.write(str(JurisFrData(d[1], d[2], d[3], d[4])) + '\n')

def get_ext_id(u):
    return u.split('&')[1].split('=')[1]


path = '/Users/jjauvion/Data/juris_fr_dump_test'

### Get list of corpus and answers
corpus = []
answers = []
for e, l in enumerate(Reader(path)):
    a = json.loads(l[1][:-1])
    if e<10909:
        corpus.append(a)
    else:
        answers.append(a)

def normalize(embeddings):
    # Normalize them, to be able to compute similarities efficiently
    norm = np.sqrt(np.sum(embeddings**2, axis=1))
    return embeddings / norm[:,None]



###
# Classical doc2vec
###

def get_data():
    reader = Reader(path)
    return imap(lambda x: TaggedDocument(simple_preprocess(json.loads(x[1][:-1])['text']), str(x[0])), reader)

model = Doc2Vec()
model.build_vocab(get_data())
for i in range(10):
    print i
    model.train(get_data(), total_examples=model.corpus_count, epochs=1)

corpus_embeddings = np.zeros((10000, 100))
for e, l in enumerate(corpus):
    corpus_embeddings[e,:] = model.infer_vector(simple_preprocess(l['text']))

answers_embeddings = np.zeros((9, 100))
for e, l in enumerate(answers):
    answers_embeddings[e,:] = model.infer_vector(simple_preprocess(l['text']))

corpus_embeddings = normalize(corpus_embeddings)
answers_embeddings = normalize(answers_embeddings)

# Q1
vector = model.infer_vector(simple_preprocess(q1))
vector /= np.sqrt(np.sum(vector**2))
corpus_sims = np.dot(corpus_embeddings, vector)
answers_sims = np.dot(answers_embeddings, vector)[:4]

plt.plot(sorted(corpus_sims))
for a in answers_sims:
    plt.plot([0, 10000], [a,a])

plt.show()

# Q2
vector = model.infer_vector(simple_preprocess(q2))
vector /= np.sqrt(np.sum(vector**2))
corpus_sims = np.dot(corpus_embeddings, vector)
answers_sims = np.dot(answers_embeddings, vector)[4:]

plt.plot(sorted(corpus_sims))
for a in answers_sims:
    plt.plot([0, 10000], [a,a])

plt.show()




###
# Develop a custom stemmer
###

import re

# All suffixes which are removed
SUFF = ['e', 's', u'é', u'és', u'ée', u'ées', 'es', 'i', 'is', 'ie', 'ies', 'er', 'oir', 'ir', 'ai', 'ais', 'erai', 'eraient', 'erais', 'ent', 'ion', 'ions', 'ation', 'ations', 'atif', 'atifs', 'ative', 'atives',
        'ant', 'ants', 'ante', 'antes', u'ité', u'ités', 'ents', 'te', 'tes', 'eux', 'euse', 'euses', 'eant', 'eants', 'dre']
# We don't impact tokens of size <=2, otherwise we remove the suffixes which are found
REGEX = re.compile('^(.{2}.*?)(%s)$' % ('|'.join(SUFF)))

# Replacement function
def repl(m):
    if m:
        return m.groups()[0]

def custom_stem(token):
    return re.sub(REGEX, repl, token)

def custom_stem_text(text):
    return ' '.join(map(custom_stem, simple_preprocess(text)))

# Compare custom stem with nltk stem on some text
stemmer = FrenchStemmer()

def nltk_stem_text(text):
    return ' '.join(map(stemmer.stem, simple_preprocess(text)))

for token in simple_preprocess(corpus[0]['text']):
    s1, s2 = stemmer.stem(token), custom_stem(token)
    if s1==s2:
        print True
    else:
        print token, s1, s2

def no_stem(text):
    return text


###
# TF-IDF model
###

def get_data():
    reader = Reader(path)
    #return lambda :imap(lambda x: ' '.join(map(stemmer_bis.stem, json.loads(x[1][:-1])['text'].split(' '))), reader)
    #return lambda :imap(lambda x: json.loads(x[1][:-1])['text'], reader)
    return lambda :imap(lambda x: json.loads(x[1][:-1])['text'], reader)

print 'Vocabulary'
vocabulary = Vocabulary.build(get_data(), window_size=3, limit=1E-6)
print 'Keywords'
keywords = Keywords(vocabulary, get_data())

corpus_keywords = []
for c in corpus:
    corpus_keywords.append(keywords.get_keywords(c['text'], 20))

answers_keywords = []
for a in answers:
    answers_keywords.append(keywords.get_keywords(a['text'], 20))

from collections import defaultdict

def similarity(q, document):
    d_q, d_d = defaultdict(lambda :0), defaultdict(lambda :0)
    for i,j in q.iteritems():
        #d_q[i] = j
        d_q[i] += j[0]
    for i,j in document.iteritems():
        #d_d[i] = j
        d_d[i] += j[0]
    # normalize
    n_q = np.sqrt(sum(i**2 for i in d_q.values()))
    n_d = np.sqrt(sum(i**2 for i in d_d.values()))
    s = 0
    for w in d_q:
        if w in d_d:
            s += d_q[w] * d_d[w]
    return s / (n_q * n_d)


# Questions analysis
kw = keywords.get_keywords(q2, 100)
corpus_scores = [similarity(kw, d) for d in corpus_keywords]
answers_scores = [similarity(kw, d) for d in answers_keywords]

print sorted([i for i in corpus_scores if i>0], reverse=True)
print answers_scores[4:]

for e, c in enumerate(corpus_scores):
    if c>0.16:
        print corpus[e]['url']
        print [i[0] for i in corpus_keywords[e]]


### Results without stemming
# Q1
#[0.11917060912627526, 0.11137216020228116, 0.11077462737976687, 0.091171984913803808, 0.091057342806291838, 0.088676702712332758, 0.085085807266739921, 0.063054287193640687, 0.062533194817654625, 0.061495727303303375, 0.05331696569702167, 0.048838309711201226, 0.048516391078145121, 0.048137635829177829, 0.048128228549490268, 0.04746780487774574, 0.046903140392674215, 0.044712130661803913, 0.043939723896980337, 0.043163694931288514, 0.041609487846795495, 0.040732353147451543, 0.040515357102698095, 0.039682797030929674, 0.03870271268096611, 0.03485789175333303, 0.033760010718326426, 0.032505093462084932, 0.03063666154617958, 0.029855937730072887, 0.029758456662631817, 0.029111548295935843, 0.02851090323678809, 0.02849288116157148, 0.028317304415497943, 0.027939254033436951, 0.027589999825551239, 0.027350585003609051, 0.026818824995584287, 0.025730733048001216, 0.025059954118483673, 0.025034230497919644, 0.025018080429189852, 0.024430097601773733, 0.024074541489540045, 0.023551334252200812, 0.023529805339021641, 0.021144960905717651, 0.020911072156599656, 0.019926106573709936, 0.019576235886366675, 0.019559208387216226, 0.019516296241031458, 0.019028248733791712, 0.01880070252723344, 0.018398530474027258, 0.018311871200645355, 0.0178953146923931, 0.017073339918582179, 0.01694555248104385, 0.015266100669045926, 0.014697155257957657, 0.014588359621812961, 0.013297775300895721, 0.01296120556849144, 0.012710643538353175, 0.012125671941876552, 0.011883120590581882, 0.011194115138528514, 0.0094904042728573609]
#[0.091171984913803808, 0.05331696569702167, 0.029111548295935843, 0.048422065935931347]
# Q2
#[0.1529418567036093, 0.13332065827949899, 0.12163050175139001, 0.11812897831883985, 0.10897025463928006, 0.10456743529805915, 0.09247563629111373, 0.088080699699184223, 0.083179033154524851, 0.080122990468754512, 0.075997401041477744, 0.072339298643825795, 0.071481706162256034, 0.066211825803941582, 0.065599728668951793, 0.065448591515258128, 0.05983285056289208, 0.058958378315495087, 0.058870810704944515, 0.056314916518444294, 0.05568414316960632, 0.054367204930155982, 0.054092505437271649, 0.053847198182003848, 0.053601929847617275, 0.051140312616649461, 0.049997628309402575, 0.047799620025121545, 0.047527520983582643, 0.047213539877605813, 0.047029063327118883, 0.043885590246271207, 0.043831841659191809, 0.043695744464942197, 0.042442213415459194, 0.041172622890848005, 0.041016852967568247, 0.039983622663154673, 0.037996088346295705, 0.037466880707533734, 0.037256980180323397, 0.036863363811588702, 0.036574938966488828, 0.036501160777983675, 0.036314556341360667, 0.036314556341360667, 0.036229784958019103, 0.03608444911567657, 0.035699678474247869, 0.035637004270727003, 0.035408440374287198, 0.034646290442005304, 0.03440537193652634, 0.0341034840265486, 0.033911904338962851, 0.033852546977873536, 0.033264579887864673, 0.032855951995737036, 0.03272919870518623, 0.03219167458090684, 0.031792084731915631, 0.031387250902309947, 0.031175219728117053, 0.0305578767180981, 0.030554009213429486, 0.030178318981223241, 0.029588395322338604, 0.02951693858974664, 0.028601045496145852, 0.028386723031524608, 0.027980078376108889, 0.027622487700772223, 0.027568822141423067, 0.02727253920951158, 0.026955897126396143, 0.02683569527467276, 0.026308837198445567, 0.025464302736960626, 0.025162902153655711, 0.025021389428773067, 0.024378986330987212, 0.024335612935887926, 0.023980578681168267, 0.023705216650760634, 0.023705216650760631, 0.023121093474211957, 0.022823285594078872, 0.022272894294134069, 0.02208204023249602, 0.021065432055289803, 0.020484866527343455, 0.02042744878949147, 0.018920723456312266, 0.01872494751369181, 0.01828055042163191, 0.018259602202051702, 0.017867446264776113, 0.0176183363846667, 0.017391798779488238, 0.017159072688434654, 0.016523700828207921, 0.01642749708157951, 0.01633623876504442, 0.016149401792399477, 0.016002587442993779, 0.015960323216439407, 0.015844829715624488, 0.01511783473432588, 0.015099857078279722, 0.015057591057090584, 0.015053296137052776, 0.014970055415193103, 0.013639938404121057, 0.01363386419911428, 0.013221215782694284, 0.012873568822288907, 0.011847409947438428, 0.011547090913101457, 0.0096495488425631538, 0.0093016438713452165, 0.0089649952409820242, 0.0086144558691753897]
#[0.088080699699184223, 0.15353351764221407, 0.131681368615674, 0.16260801055789406, 0.1857452008810134]

### Results with stemming
# Q1
#[0.14799711444472105, 0.10549320005486562, 0.098713773082698089, 0.096849856562679137, 0.095835171944194206, 0.091321802542956854, 0.083165362933408954, 0.079844282023975532, 0.079021702414835401, 0.074137262323144784, 0.070133717240959056, 0.067408046020958637, 0.066104563758868584, 0.065620022498855513, 0.060706011461027193, 0.059766646785950159, 0.056205741330102851, 0.054783206518093638, 0.054056308074114802, 0.048929222930261126, 0.048706126764287282, 0.04864181857730529, 0.048372759154733914, 0.046571705867450679, 0.045763879957813065, 0.044094389831014463, 0.042019928047440459, 0.04116270657051551, 0.039997006286340425, 0.039929856957557561, 0.037405488034915467, 0.03705370719275828, 0.03650647108220894, 0.036316877031613425, 0.035578228056999311, 0.035443549646608841, 0.035189460489642603, 0.034737794617074748, 0.034512174560736984, 0.034445591952261219, 0.034433977410762144, 0.03292566883847952, 0.032852987785464804, 0.032351686658086139, 0.032090826714106943, 0.031889615119457822, 0.03185866954623346, 0.031298936017209851, 0.0299770922411761, 0.02963521723148976, 0.029284751813010435, 0.02870441829272832, 0.028686256454712112, 0.02731190171453679, 0.027267978150232953, 0.027051915220849338, 0.026978398873645663, 0.026545527796316748, 0.026288686958499435, 0.026205856560963123, 0.02550015359339906, 0.023448524956951235, 0.023430075792921282, 0.022622716745859705, 0.022588511094756354, 0.022553546446797752, 0.022271514944171754, 0.02205457461808576, 0.021382646582230221, 0.020969307090014849, 0.020860760472785532, 0.020219897709934209, 0.020190275842497402, 0.019897801211803217, 0.019372885686819163, 0.019117054882918868, 0.019093401826018621, 0.018881532195127677, 0.01860594407497947, 0.018484943104250532, 0.017968606510062348, 0.01759510525741129, 0.017524931773762818, 0.017485276164245462, 0.017397059711742713, 0.017305793560910793, 0.01726723459758529, 0.016926451159850739, 0.016831727436108723, 0.01678152473605651, 0.016749924802090997, 0.016153189499381031, 0.01576862202212537, 0.015404892209255923, 0.014963522808190475, 0.014809795569089403, 0.014427776230261032, 0.014007755224117754, 0.013419119276813935, 0.013310913781566267, 0.013281630903398504, 0.013239762930242066, 0.013222751778103994, 0.01311277105305441, 0.012920845338835385, 0.012883727698653718, 0.01232699809479825, 0.012091431504759626, 0.010963422742871407, 0.010538209872310689, 0.009347726958592234, 0.0092791628168036166, 0.008915053654810403, 0.0088716942978783325, 0.0087716575698865238, 0.0085588339676963242, 0.0085024430238287794, 0.0083455608655900841, 0.008219526583302831, 0.0079455837754633558, 0.0074464527715416753, 0.0074426790875241969, 0.0068363235527775122, 0.0060773480607925262, 2.9151882941846701e-10]
#[0.14799711444472105, 0.060706011461027193, 0.03185866954623346, 0.062415501678107083]
# Q2
#[0.20361842424656337, 0.1796201342738781, 0.17179080473343833, 0.16897150534561084, 0.14920953136050977, 0.14487362724778988, 0.14222975773853266, 0.13282272978246829, 0.13138580151583895, 0.12019952325170288, 0.1173593518562526, 0.11227743643885814, 0.11135631827134189, 0.10423390801526351, 0.10097248915064437, 0.10067456515456003, 0.099773334376981979, 0.090031343743453257, 0.088311465233848141, 0.085646137448112003, 0.085325620954450704, 0.08097050380407135, 0.079356744957655823, 0.075403656200140279, 0.07360913146276242, 0.069248452837462351, 0.066939437892207201, 0.066781240422147531, 0.06489955089157369, 0.064504726015411906, 0.06403781789625218, 0.064028290672607333, 0.062756315786677536, 0.062756315786677522, 0.062299728632225396, 0.062299728632225389, 0.06132887241098807, 0.061191037116273439, 0.059485925410686417, 0.059298316720540291, 0.059092769173240502, 0.058511350634484129, 0.057968717587119883, 0.057771576577190224, 0.05668453620868049, 0.055235744313187465, 0.055064183882506876, 0.054127626526522518, 0.052949193449492823, 0.05278547256208576, 0.052107207798869466, 0.052008097004232298, 0.051031141841033162, 0.050044302192232701, 0.049735417333383582, 0.048843687958636237, 0.048223793847624929, 0.047487489563367666, 0.047208645649393706, 0.046811817257445043, 0.046770919937872031, 0.046266336759396266, 0.046039006838162734, 0.043919733478362928, 0.043158857972757744, 0.043033690837965315, 0.043024472369535771, 0.042127526925395634, 0.042020393582853637, 0.041762738231158329, 0.041104856923753534, 0.0410906175164217, 0.040929415561516094, 0.040812806881635522, 0.039933013674944749, 0.039908396336845176, 0.039844276528260544, 0.03869013382484715, 0.037831789464022214, 0.037780695220069681, 0.037620651957104498, 0.03666209490916638, 0.036013199323924293, 0.035723098711415713, 0.035586646388011858, 0.035243513903281766, 0.034754192773018312, 0.034492494266957989, 0.034331311867813581, 0.034017994386111264, 0.033914574561646531, 0.033790733065739195, 0.033601538451770434, 0.033270201024134284, 0.032295701296040112, 0.031841992636202791, 0.031634919005920706, 0.031575200283286274, 0.03149674984136016, 0.031158821662747565, 0.031029757319606624, 0.031026522175936756, 0.030718355606659493, 0.030271829526525511, 0.030258863741364071, 0.030118872094889938, 0.029966089875065476, 0.029865302237906344, 0.029581493921745836, 0.029359581235443532, 0.029282835281301052, 0.028821280662708396, 0.028430798213199011, 0.027912946607177667, 0.027875527882350339, 0.027647728240614469, 0.026178937934519784, 0.026170989244739717, 0.02610157944358758, 0.025875045404334697, 0.025592202993482277, 0.025511374671992805, 0.025501570694527988, 0.025493415045856803, 0.025445277832477693, 0.025445277832477693, 0.025393519905892316, 0.02474272808359131, 0.024584682826654103, 0.024561794271756799, 0.024542758286247791, 0.024302027314553141, 0.023638453143697481, 0.023599699508928901, 0.02326623820496761, 0.023066856289011065, 0.022865004767680649, 0.022489769597443213, 0.022231487103984079, 0.021987122846238952, 0.0219861134673674, 0.021744615821686693, 0.021589283630439476, 0.021145825563186452, 0.021073110944289562, 0.020934970882673976, 0.020576305445013158, 0.0204826962455547, 0.020069566677550627, 0.020028723860035652, 0.01980356474367289, 0.019329212505644049, 0.019217732719627435, 0.018025712136831094, 0.017605379011805655, 0.017581800089026888, 0.017581800089026888, 0.017386339634104672, 0.017256576808398909, 0.017108183953197232, 0.017053887079454988, 0.016923331201853166, 0.016617193693395024, 0.016026142736998487, 0.015594797076728149, 0.015411026186955475, 0.01513016780496481, 0.015018030905955078, 0.014862506982642121, 0.014641793707259453, 0.014483527670618394, 0.01429828913535129, 0.014187437435383064, 0.014004094638915783, 0.014000001869768151, 0.013910927228669857, 0.013615185441810135, 0.012994694038270941, 0.0082940872965526023, 1.6515671304573158e-09]
#[0.17179080473343833, 0.12154213439560171, 0.13042306284669714, 0.18292290346636653, 0.19555646609853949]